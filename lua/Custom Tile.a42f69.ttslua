ENABLE_SPECTATOR    = true
ENABLE_GM           = false
HIDE_OBJECT         = false

COLOR_PICKER_XML_URL = "https://raw.githubusercontent.com/DedlySpyder/PlayerColorPicker/dev/xml/player_color_picker.xml"

COLOR_BUTTON_ID_PREFIX = "dedlyPlayerColorPicker_"
ROW_HEIGHT = 44

CURRENT_COLORS = {}

function onLoad()
    setupCurrentColors()

    if not Global.getVar("DEDLY_PLAYER_COLOR_PICKER_ENABLED") then
        WebRequest.get(COLOR_PICKER_XML_URL, addColorPickerXml)
        Wait.time(function()
            UI.hide("dedlyPlayerColorPickerExpandColors")
        end, 1)
        Global.setVar("DEDLY_PLAYER_COLOR_PICKER_ENABLED", true)
    end
    showColorPicker()

    if HIDE_OBJECT then
        hideAbsolutely()
    end
end

function setupCurrentColors()
    local colors = Player.getAvailableColors()

    if ENABLE_SPECTATOR then
        table.insert(colors, "Grey")
    end

    if ENABLE_GM then
        table.insert(colors, "Black")
    end

    local deduped = {}
    local seen = {}
    for _, color in ipairs(colors) do
        if not seen[color] then
            seen[color] = true

            -- Black can end up in the list if they have a hand zone
            -- Grey can't currently have a hand zone, but who knows if that will stay true
            if not ((color == "Black" and not ENABLE_GM) or (color == "Grey" and not ENABLE_SPECTATOR)) then
                table.insert(deduped, color)
            end
        end
    end

    CURRENT_COLORS = deduped
end

function hideAbsolutely()
    self.interactable = false
    self.tooltip = false
    self.lock()

    for _, component in ipairs(self.getComponents()) do
        -- This is sometimes MeshCollider or BoxCollider
        if string.find(component.name, "Collider") then
            component.set("enabled", false)
        end
    end
    self.getComponent("AudioSource").set("enabled", false)
    self.getComponent("MeshRenderer").set("enabled", false)
end

function addColorPickerXml(response)
    local pickerXml = mustacheColorPickerXml(response.text)
    local currentXml = UI.getXml()
    local newXml = currentXml .. pickerXml
    UI.setXml(newXml)
end

function mustacheColorPickerXml(xml)
    xml = string.gsub(xml, "{{BUTTONS}}", getColorButtonsXml())
    xml = string.gsub(xml, "{{HEIGHT}}", getPickerHeight())
    return string.gsub(xml, "{{GUID}}", self.guid)
end

function getColorButtonsXml()
    local buttons = ""
    for _, color in ipairs(CURRENT_COLORS) do
        local textColor, textValue = getColorButtonValues(color)
        buttons = buttons .. '            <Button id="' .. COLOR_BUTTON_ID_PREFIX .. color ..'" color="' .. color .. '" onClick="{{GUID}}/onChangeColor"><Text color="' .. textColor .. '">' .. textValue .. '</Text></Button>\r\n'
    end
    return buttons
end

function getColorButtonValues(color)
    local textColor = "White"
    local textValue = color

    if color == "Yellow" or color == "White" then
        textColor = "Black"
    end

    if color == "Black" then
        textValue = "Black (GM)"
    end

    if color == "Grey" then
        textValue = "Grey (Spectator)"
    end
    return textColor, textValue
end

function onChangeColor(player, _, color)
    color = string.sub(color, string.len(COLOR_BUTTON_ID_PREFIX) + 1)
    if validColor(color) then
        if color ~= "Grey" and Player[color].seated then
            player.broadcast("Someone is already that color, try another")
        else
            if color == "Grey" and not ENABLE_SPECTATOR then
                player.broadcast("Switching to a Spectator is not allowed")
            elseif color == "Black" and not ENABLE_GM then
                player.broadcast("Switching to the GM is not allowed")
            else
                player.changeColor(color)
            end
        end
    end
end

function validColor(color)
    for _, check in ipairs(Player.getColors()) do
        if check == color then return true end
    end
    return false
end

function getPickerHeight()
    return #CURRENT_COLORS * ROW_HEIGHT
end

function collapseColorPicker()
    UI.hide("dedlyPlayerColorPickerColorButtons")
    UI.show("dedlyPlayerColorPickerExpandColors")
    UI.hide("dedlyPlayerColorPickerCollapseColors")

    UI.setAttribute("dedlyPlayerColorPicker", "height", ROW_HEIGHT)
end

function expandColorPicker()
    UI.show("dedlyPlayerColorPickerColorButtons")
    UI.show("dedlyPlayerColorPickerCollapseColors")
    UI.hide("dedlyPlayerColorPickerExpandColors")

    UI.setAttribute("dedlyPlayerColorPicker", "height", getPickerHeight())
end

function closeColorPicker()
    UI.hide("dedlyPlayerColorPicker")
    self.destruct()
end

function showColorPicker()
    UI.show("dedlyPlayerColorPicker")
    expandColorPicker()
end